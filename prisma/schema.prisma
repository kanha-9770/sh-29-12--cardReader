// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String        @id @default(cuid())
  name           String
  email          String        @unique
  password       String
  isAdmin        Boolean       @default(false)
  organizationId Int
  organization   Organization? @relation("OrganizationUsers", fields: [organizationId], references: [id])
  isDeleted      Boolean       @default(false)
  createdAt      DateTime      @default(now())
  Form           Form[]
}


model Form {
  id                     String         @id @default(cuid())
  cardNo                 String
  salesPerson            String
  date                   DateTime
  country                String
  cardFrontPhoto         String
  cardBackPhoto          String?
  leadStatus             String
  dealStatus             String
  meetingAfterExhibition Boolean
  industryCategories     String
  description            String         @db.Text
  userId                 String
  user                   User           @relation(fields: [userId], references: [id])
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  extractedData          ExtractedData?
  mergedData             MergedData?
  status                 String         @default("PENDING")
  extractionStatus       String         @default("PENDING")
  zohoStatus             String         @default("PENDING")
}

model ExtractedData {
  id             String   @id @default(cuid())
  formId         String   @unique
  form           Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  name           String?
  companyName    String?
  website        String?
  email          String?
  address        String?
  contactNumbers String?
  state          String?
  description    String?
  country        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  status         String   @default("PENDING")
}

model MergedData {
  id                     String   @id @default(cuid())
  formId                 String   @unique
  form                   Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  cardNo                 String
  salesPerson            String
  date                   DateTime
  country                String
  cardFrontPhoto         String
  cardBackPhoto          String?
  leadStatus             String
  dealStatus             String
  meetingAfterExhibition Boolean
  industryCategories     String
  description            String   @default("") @db.Text
  name                   String?
  companyName            String?
  website                String?
  email                  String?
  address                String?
  contactNumbers         String?
  state                  String?
  extractedCountry       String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  status                 String   @default("PENDING")
}

model Organization {
  id             Int      @id @default(autoincrement())
  organizationId String   @unique
  name           String?
  createdBy      String
  createdAt      DateTime @default(now())
  users          User[]   @relation("OrganizationUsers")
}

